/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

export interface INormsClient {
    getNorms(): Observable<Norma[]>;
    postNorma(norma: Norma): Observable<Norma>;
    getNorma(machine: string | null, groupDiff: string | null): Observable<Norma>;
    putNorma(id: string, norma: Norma): Observable<FileResponse | null>;
    deleteNorma(id: string): Observable<Norma>;
}

@Injectable({
    providedIn: 'root'
})
export class NormsClient implements INormsClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44333";
    }

    getNorms(): Observable<Norma[]> {
        let url_ = this.baseUrl + "/api/Norms";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetNorms(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetNorms(<any>response_);
                } catch (e) {
                    return <Observable<Norma[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Norma[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetNorms(response: HttpResponseBase): Observable<Norma[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Norma.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Norma[]>(<any>null);
    }

    postNorma(norma: Norma): Observable<Norma> {
        let url_ = this.baseUrl + "/api/Norms";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(norma);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPostNorma(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostNorma(<any>response_);
                } catch (e) {
                    return <Observable<Norma>><any>_observableThrow(e);
                }
            } else
                return <Observable<Norma>><any>_observableThrow(response_);
        }));
    }

    protected processPostNorma(response: HttpResponseBase): Observable<Norma> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Norma.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Norma>(<any>null);
    }

    getNorma(machine: string | null, groupDiff: string | null): Observable<Norma> {
        let url_ = this.baseUrl + "/api/Norms/{machine}/{groupDiff}";
        if (machine === undefined || machine === null)
            throw new Error("The parameter 'machine' must be defined.");
        url_ = url_.replace("{machine}", encodeURIComponent("" + machine));
        if (groupDiff === undefined || groupDiff === null)
            throw new Error("The parameter 'groupDiff' must be defined.");
        url_ = url_.replace("{groupDiff}", encodeURIComponent("" + groupDiff));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetNorma(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetNorma(<any>response_);
                } catch (e) {
                    return <Observable<Norma>><any>_observableThrow(e);
                }
            } else
                return <Observable<Norma>><any>_observableThrow(response_);
        }));
    }

    protected processGetNorma(response: HttpResponseBase): Observable<Norma> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Norma.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Norma>(<any>null);
    }

    putNorma(id: string, norma: Norma): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/Norms/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(norma);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPutNorma(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPutNorma(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processPutNorma(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    deleteNorma(id: string): Observable<Norma> {
        let url_ = this.baseUrl + "/api/Norms/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteNorma(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteNorma(<any>response_);
                } catch (e) {
                    return <Observable<Norma>><any>_observableThrow(e);
                }
            } else
                return <Observable<Norma>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteNorma(response: HttpResponseBase): Observable<Norma> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Norma.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Norma>(<any>null);
    }
}

export interface ISmensClient {
    getSmens(): Observable<Smena[]>;
    postSmena(smena: Smena): Observable<Smena>;
    updateSmena(smena: Smena): Observable<Smena>;
    getSmena(machine: string | null, date: string | null): Observable<Smena>;
    deleteSmena(id: string): Observable<Smena>;
}

@Injectable({
    providedIn: 'root'
})
export class SmensClient implements ISmensClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44333";
    }

    getSmens(): Observable<Smena[]> {
        let url_ = this.baseUrl + "/api/Smens";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSmens(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSmens(<any>response_);
                } catch (e) {
                    return <Observable<Smena[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<Smena[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetSmens(response: HttpResponseBase): Observable<Smena[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(Smena.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Smena[]>(<any>null);
    }

    postSmena(smena: Smena): Observable<Smena> {
        let url_ = this.baseUrl + "/api/Smens";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(smena);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPostSmena(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostSmena(<any>response_);
                } catch (e) {
                    return <Observable<Smena>><any>_observableThrow(e);
                }
            } else
                return <Observable<Smena>><any>_observableThrow(response_);
        }));
    }

    protected processPostSmena(response: HttpResponseBase): Observable<Smena> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Smena.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Smena>(<any>null);
    }

    updateSmena(smena: Smena): Observable<Smena> {
        let url_ = this.baseUrl + "/api/Smens";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(smena);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processUpdateSmena(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processUpdateSmena(<any>response_);
                } catch (e) {
                    return <Observable<Smena>><any>_observableThrow(e);
                }
            } else
                return <Observable<Smena>><any>_observableThrow(response_);
        }));
    }

    protected processUpdateSmena(response: HttpResponseBase): Observable<Smena> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Smena.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Smena>(<any>null);
    }

    getSmena(machine: string | null, date: string | null): Observable<Smena> {
        let url_ = this.baseUrl + "/api/Smens/{machine}/{date}";
        if (machine === undefined || machine === null)
            throw new Error("The parameter 'machine' must be defined.");
        url_ = url_.replace("{machine}", encodeURIComponent("" + machine));
        if (date === undefined || date === null)
            throw new Error("The parameter 'date' must be defined.");
        url_ = url_.replace("{date}", encodeURIComponent("" + date));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetSmena(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetSmena(<any>response_);
                } catch (e) {
                    return <Observable<Smena>><any>_observableThrow(e);
                }
            } else
                return <Observable<Smena>><any>_observableThrow(response_);
        }));
    }

    protected processGetSmena(response: HttpResponseBase): Observable<Smena> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Smena.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Smena>(<any>null);
    }

    deleteSmena(id: string): Observable<Smena> {
        let url_ = this.baseUrl + "/api/Smens/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteSmena(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteSmena(<any>response_);
                } catch (e) {
                    return <Observable<Smena>><any>_observableThrow(e);
                }
            } else
                return <Observable<Smena>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteSmena(response: HttpResponseBase): Observable<Smena> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Smena.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<Smena>(<any>null);
    }
}

export interface IWorkerDatasClient {
    getWorkerDatas(): Observable<WorkerData[]>;
    postWorkerData(workerData: WorkerData): Observable<WorkerData>;
    getWorkerData(tabelNum: string | null): Observable<WorkerData>;
    putWorkerData(id: string, workerData: WorkerData): Observable<FileResponse | null>;
    deleteWorkerData(id: number): Observable<WorkerData>;
}

@Injectable({
    providedIn: 'root'
})
export class WorkerDatasClient implements IWorkerDatasClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://localhost:44333";
    }

    getWorkerDatas(): Observable<WorkerData[]> {
        let url_ = this.baseUrl + "/api/WorkerDatas";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWorkerDatas(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWorkerDatas(<any>response_);
                } catch (e) {
                    return <Observable<WorkerData[]>><any>_observableThrow(e);
                }
            } else
                return <Observable<WorkerData[]>><any>_observableThrow(response_);
        }));
    }

    protected processGetWorkerDatas(response: HttpResponseBase): Observable<WorkerData[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WorkerData.fromJS(item));
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WorkerData[]>(<any>null);
    }

    postWorkerData(workerData: WorkerData): Observable<WorkerData> {
        let url_ = this.baseUrl + "/api/WorkerDatas";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(workerData);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPostWorkerData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPostWorkerData(<any>response_);
                } catch (e) {
                    return <Observable<WorkerData>><any>_observableThrow(e);
                }
            } else
                return <Observable<WorkerData>><any>_observableThrow(response_);
        }));
    }

    protected processPostWorkerData(response: HttpResponseBase): Observable<WorkerData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WorkerData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WorkerData>(<any>null);
    }

    getWorkerData(tabelNum: string | null): Observable<WorkerData> {
        let url_ = this.baseUrl + "/api/WorkerDatas/{tabelNum}";
        if (tabelNum === undefined || tabelNum === null)
            throw new Error("The parameter 'tabelNum' must be defined.");
        url_ = url_.replace("{tabelNum}", encodeURIComponent("" + tabelNum));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetWorkerData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetWorkerData(<any>response_);
                } catch (e) {
                    return <Observable<WorkerData>><any>_observableThrow(e);
                }
            } else
                return <Observable<WorkerData>><any>_observableThrow(response_);
        }));
    }

    protected processGetWorkerData(response: HttpResponseBase): Observable<WorkerData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WorkerData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WorkerData>(<any>null);
    }

    putWorkerData(id: string, workerData: WorkerData): Observable<FileResponse | null> {
        let url_ = this.baseUrl + "/api/WorkerDatas/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(workerData);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("put", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processPutWorkerData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processPutWorkerData(<any>response_);
                } catch (e) {
                    return <Observable<FileResponse | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<FileResponse | null>><any>_observableThrow(response_);
        }));
    }

    protected processPutWorkerData(response: HttpResponseBase): Observable<FileResponse | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return _observableOf({ fileName: fileName, data: <any>responseBlob, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<FileResponse | null>(<any>null);
    }

    deleteWorkerData(id: number): Observable<WorkerData> {
        let url_ = this.baseUrl + "/api/WorkerDatas/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteWorkerData(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteWorkerData(<any>response_);
                } catch (e) {
                    return <Observable<WorkerData>><any>_observableThrow(e);
                }
            } else
                return <Observable<WorkerData>><any>_observableThrow(response_);
        }));
    }

    protected processDeleteWorkerData(response: HttpResponseBase): Observable<WorkerData> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = WorkerData.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<WorkerData>(<any>null);
    }
}

export class Norma implements INorma {
    id!: string;
    machine!: string;
    groupDiff!: string | undefined;
    amount!: number;

    constructor(data?: INorma) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.machine = _data["machine"];
            this.groupDiff = _data["groupDiff"];
            this.amount = _data["amount"];
        }
    }

    static fromJS(data: any): Norma {
        data = typeof data === 'object' ? data : {};
        let result = new Norma();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["machine"] = this.machine;
        data["groupDiff"] = this.groupDiff;
        data["amount"] = this.amount;
        return data; 
    }
}

export interface INorma {
    id: string;
    machine: string;
    groupDiff: string | undefined;
    amount: number;
}

export class Smena implements ISmena {
    id!: string;
    dateSmen!: string | undefined;
    machine!: string | undefined;
    numSmen!: string | undefined;
    workerTimes!: WorkerTime[] | undefined;

    constructor(data?: ISmena) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.dateSmen = _data["dateSmen"];
            this.machine = _data["machine"];
            this.numSmen = _data["numSmen"];
            if (Array.isArray(_data["workerTimes"])) {
                this.workerTimes = [] as any;
                for (let item of _data["workerTimes"])
                    this.workerTimes!.push(WorkerTime.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Smena {
        data = typeof data === 'object' ? data : {};
        let result = new Smena();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["dateSmen"] = this.dateSmen;
        data["machine"] = this.machine;
        data["numSmen"] = this.numSmen;
        if (Array.isArray(this.workerTimes)) {
            data["workerTimes"] = [];
            for (let item of this.workerTimes)
                data["workerTimes"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ISmena {
    id: string;
    dateSmen: string | undefined;
    machine: string | undefined;
    numSmen: string | undefined;
    workerTimes: WorkerTime[] | undefined;
}

export class WorkerTime implements IWorkerTime {
    id!: string;
    tbNum!: string | undefined;
    grade!: string | undefined;
    sdelTime!: number;
    nightTime!: number;
    prostTime!: number;
    prikTime!: number;
    srednTime!: number;
    pprTime!: number;
    doubleTime!: number;
    smena!: Smena | undefined;
    smenaId!: string;

    constructor(data?: IWorkerTime) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.tbNum = _data["tbNum"];
            this.grade = _data["grade"];
            this.sdelTime = _data["sdelTime"];
            this.nightTime = _data["nightTime"];
            this.prostTime = _data["prostTime"];
            this.prikTime = _data["prikTime"];
            this.srednTime = _data["srednTime"];
            this.pprTime = _data["pprTime"];
            this.doubleTime = _data["doubleTime"];
            this.smena = _data["smena"] ? Smena.fromJS(_data["smena"]) : <any>undefined;
            this.smenaId = _data["smenaId"];
        }
    }

    static fromJS(data: any): WorkerTime {
        data = typeof data === 'object' ? data : {};
        let result = new WorkerTime();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["tbNum"] = this.tbNum;
        data["grade"] = this.grade;
        data["sdelTime"] = this.sdelTime;
        data["nightTime"] = this.nightTime;
        data["prostTime"] = this.prostTime;
        data["prikTime"] = this.prikTime;
        data["srednTime"] = this.srednTime;
        data["pprTime"] = this.pprTime;
        data["doubleTime"] = this.doubleTime;
        data["smena"] = this.smena ? this.smena.toJSON() : <any>undefined;
        data["smenaId"] = this.smenaId;
        return data; 
    }
}

export interface IWorkerTime {
    id: string;
    tbNum: string | undefined;
    grade: string | undefined;
    sdelTime: number;
    nightTime: number;
    prostTime: number;
    prikTime: number;
    srednTime: number;
    pprTime: number;
    doubleTime: number;
    smena: Smena | undefined;
    smenaId: string;
}

export class WorkerData implements IWorkerData {
    id!: string;
    name!: string | undefined;
    surname!: string | undefined;
    patronymic!: string | undefined;
    tableNum!: string | undefined;
    grade!: string | undefined;

    constructor(data?: IWorkerData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.surname = _data["surname"];
            this.patronymic = _data["patronymic"];
            this.tableNum = _data["tableNum"];
            this.grade = _data["grade"];
        }
    }

    static fromJS(data: any): WorkerData {
        data = typeof data === 'object' ? data : {};
        let result = new WorkerData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["surname"] = this.surname;
        data["patronymic"] = this.patronymic;
        data["tableNum"] = this.tableNum;
        data["grade"] = this.grade;
        return data; 
    }
}

export interface IWorkerData {
    id: string;
    name: string | undefined;
    surname: string | undefined;
    patronymic: string | undefined;
    tableNum: string | undefined;
    grade: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new SwaggerException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}